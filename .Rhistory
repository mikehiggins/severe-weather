help list
help data.frame
help {data.frame}
row(hw1, 2)
hw1[1:2,]
hw1[152:153,]
hw1[47,1]
hw1
missing_ozone <- is.na(hw1)
hw1[!missing_ozone]
hw1[missing_ozone]
missing_ozone
hw1
got_ozone <- complete.cases(hw1[1])
hw1[got_ozone, ][1:6,]
hw1[got_ozone, ]
length(hw1[got_ozone, ])
length(hw1[got_ozone, ])
hw1[!got_ozone, ]
hw1[got_ozone, ]
mean(hw1[got_ozone, ])
mean(hw1[got_ozone, 1])
hw1[got_ozone, 1]
hw1
extract <- hw1[1] > 31
extract
subset(hw1, hw1$Ozone > 31)
subset(hw1, hw1$Ozone > 31 & hw1$Temp > 90)
mean(subset(hw1, hw1$Ozone > 31 & hw1$Temp > 90))
mean(subset(hw1$Solar.R, hw1$Ozone > 31 & hw1$Temp > 90))
mean(hw1$Temp, hw1$Month == 6)
mean(subset(hw1$Temp, hw1$Month = 6))
mean(subset(hw1$Temp, hw1$Month == 6))
subset(hw1, hw1$Month == 5))
subset(hw1, hw1$Month == 5)
max(subset(hw1$Ozone, hw1$Month == 5))
max(subset(hw1$Ozone, hw1$Month == 5 & !(is.NA(hw1$Ozone))
max(subset(hw1$Ozone, hw1$Month == 5 & !(is.NA(hw1$Ozone))))
max(subset(hw1$Ozone, hw1$Month == 5 ))
max(subset(got_ozone$Ozone, got_ozone$Month == 5 ))
max(subset(hw1$Ozone, hw1$Month == 5 ))
install.packages("swirl")
library(swirl)
ls
ls()
rm(list=ls())
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ time | Diet, Bodyweight)
xyplot(weight ~ time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
print(p)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(Ozone~Wind)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col="red", pch = 8, main= "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), layout=c(5,1), data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), layout=c(5,1), data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile="plot1.R", local=TRUE)
source("plot1.R", local=TRUE)
pathtofile
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip=FALSE, pch = 20, xlab = myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab=myylab, main=mymain)
sample(colors())
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red,"blue""))
p1 <- colorRampPalette(c("red,"blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow")
)
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun(rgb)
?fun rgb
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green", alpha=0.5))
p3 <- colorRampPalette(c("blue", "green"), alpha=0.5)
p3(5)
plot(x,y, pch=19, col=rgb(0,0.5,0.5))
plot(x,y, pch=19, col=rgb(0,0.5,0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ~hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", clor=manufacturer)
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ,hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point", "smooth", facets=.~drv))
qplot(displ,hwy,data=mpg,geom=c("point", "smooth"), facets=.~drv)
g <- ggplot(mpg, aes(displ,hwy))
summary(g)
g
g+geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method="lm")
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size=4, alpha=1/2)
g + geom_point(size=4, alpha=1/2, aes(color=drv))
g + geom_point(size=4, alpha=1/2, aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(color=aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(color=aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(color=drv) + theme_bw(base_family="Times")
g + geom_point(aes(color=drv) + theme_bw(base_family="Times")
)
g + geom_point(aes(color=drv) + theme_bw(base_family="Times"))
g + geom_point(aes(color=drv)) + theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3,3)))
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", size=2, se=FALSE, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", size=2, se=FALSE, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut())
qplot(carat, price, data=diamonds, shape=cut
)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm", facets=.~cut)
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamond$carat, seq, na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq, na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut())
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut
)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(mt)
plot(denmt)
distmt
cmat
points(cx,cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pex=2, lwd=2)
points(newCx, newCy, col=cols1, cex=2, lwd=2)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,col=cols1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
library(swirl)
swirl()
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat
))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u %*% svd1$d %*% svd$
v
a1 <- svd1$u %*% svd1$d %*% svd$v
info()
a1 <- svd1$u[,1] %*% svd1$ * svd1$d[1]
a1 <- svd1$u[,1] %*% svd1$ * (svd1$d[1])
a1 <- svd1$u[,1] %*% svd1$v * (svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a3 <- svd1$u[,1:3] %*% diag(svd1$d[1:3]) %*% t(svd1$v[,1:3])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[,562-563])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12] . sub1$maxCon)
mdist <- dist(sub1[,10:12] + sub1$maxCon)
mdist <- dist(sub1[,10:12] & sub1$maxCon)
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-2], centers=6)
kClust <- kmeans(sub1[,1:561], centers=6)
kClust <- kmeans(sub1[,-c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log(x0), log(x1))
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), string="%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
intersect(site0, site 1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, )
cnt- <- subset(pm0, State.Code ==36 & country.site %in% box)
cnt <- subset(pm0, State.Code ==36 & country.site %in% box)
cnt <- subset(pm0, State.Code ==36 & country.site %in% box)
cnt <- subset(pm0, State.Code ==36 & county.site %in% box)
cnt0 <- subset(pm0, State.Code ==36 & county.site %in% box)
cnt0 <- subset(pm0, State.Code ==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code ==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID==2008)
pm1sub <- subset(cnt1 County.Code == 63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub)
plot(dates0, x0sub, pch=20)
abline(lwd=2, median(x0sub, na.rm=TRUE))
abline(lwd=2, v=median(x0sub, na.rm=TRUE))
abline(lwd=2, h=median(x0sub, na.rm=TRUE))
plot(dates1, x1sub, pch=20)
abline(lwd=2, h=median(x1sub, na.rm=TRUE))
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0, tapply)
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.fram(state=names(mn0))
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(0.5,2,0.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2,.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y]
info
info()
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y,]
shiny::runApp('datascience/ddp/Project 2/ddp-app')
runApp('datascience/ddp/Project 2/ddp-app')
?barplot
?cex.axis
??cex.axis
runApp('datascience/ddp/Project 2/ddp-app')
runApp('datascience/ddp/Project 2/ddp-app')
?yaxt
??yaxt
?axis
runApp('datascience/ddp/Project 2/ddp-app')
runApp('datascience/ddp/Project 2/ddp-app')
?scipen
?options
runApp('datascience/ddp/Project 2/ddp-app')
runApp('datascience/ddp/Project 2/ddp-app')
getwd()
setwd("~/datascience/represearch/project2/")
sourceFile <- "repdata%2Fdata%2FStormData.csv.bz2"
df <- read.csv(sourceFile)
dfback <- df
df$BGN_DATE <- as.POSIXct(df$BGN_DATE, tz=df$TIMm/%d/%Y %H:%M:%S")
df$BGN_DATE <- as.POSIXct(df$BGN_DATE, format="%m/%d/%Y %H:%M:%S")
df$BGN_DT <- as.POSIXct(paste(df$BGN_DATE, df$BGN_TIME), format="%Y-%m-%d %H%M")
df$END_DATE <- as.POSIXct(df$END_DATE, format="%m/%d/%Y %H:%M:%S")
df$END_DT <- as.POSIXct(paste(df$END_DATE, df$END_TIME), format="%Y-%m-%d %H%M")
str(df)
unique(df$END_DT)
str(df)
unique(df$PROPDMG)
unique(df$PROPDMGEXP)
exp <- df[, c("PROPDMG", "PROPDMGEXP")]
head(exp)
conv <- function(x,y) {}
source('~/datascience/represearch/project2/conv.R')
source('~/datascience/represearch/project2/conv.R')
source('~/datascience/represearch/project2/conv.R')
conv(25,"K")
conv(25,"")
conv(25,"M")
conv(25,"er")
conv("fr","er")
conv(124,"M")
conv(124,"K")
conv(124,"M")
source('~/datascience/represearch/project2/conv.R')
conv(124,"M")
exp$PROPVAL <- sapply(exp, conv(exp$PROPDMG, exp$PROPDMGEXP))
?sapply
sapply(exp, conv(), x=exp$PROPDMG, y=exp$PROPDMGEXP)
sapply(exp, conv(exp$PROPDMG, exp$PROPDMGEXP))
exp$VALS <- sapply(exp, conv(exp$PROPDMG, exp$PROPDMGEXP))
source('~/datascience/represearch/project2/conv.R')
conv(12,"M")
exp$VALS <- sapply(exp, FUN=conv(exp$PROPDMG, exp$PROPDMGEXP))
exp$VALS <- vapply(exp, FUN=conv(exp$PROPDMG, exp$PROPDMGEXP))
?ifelse
source('~/datascience/represearch/project2/conv.R')
conv(123,"K")
source('~/datascience/represearch/project2/conv.R')
